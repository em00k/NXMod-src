
; --------------------------------------------------------------------------


;**************************************************
;*    ----- Protracker V2.1A Playroutine -----    *
;* Peter "CRAYON" Hanning / Mushroom Studios 1992 *
;*     Vinterstigen 12, 14440 Ronninge, Sweden    *
;**************************************************

; VBlank Version 2:
; Call mt_init to initialize the routine, then call mt_music on
; each vertical blank (50 Hz). To end the song and turn off all
; voices, call mt_end.

; This playroutine is not very fast, optimized or well commented,
; but all the new commands in PT2.1A should work.
; If it's not good enough, you'll have to change it yourself.
; We'll try to write a faster routine soon...

; Changes from V1.0C playroutine:
; - Vibrato depth changed to be compatible with Noisetracker 2.0.
;   You'll have to double all vib. depths on old PT modules.
; - Funk Repeat changed to Invert Loop.
; - Period set back earlier when stopping an effect.


DMAWait = 300 ; Set this as low as possible without losing low notes.


; --------------------------------------------------------------------------


; Channel strucuture.


n_note	equ	0	; WORD
n_cmd	equ	2	; WORD
n_cmdlo	equ	3	; BYTE
n_start	equ	4	; LONG
n_length	equ	8	; WORD
n_loopstart	equ	10	; LONG
n_replen	equ	14	; WORD
n_period	equ	16	; WORD
n_finetune	equ	18	; BYTE
n_volume	equ	19	; BYTE
n_dmabit	equ	20	; WORD
n_toneportdirec	equ	22	; BYTE
n_toneportspeed	equ	23	; BYTE
n_wantedperiod	equ	24	; WORD
n_vibratocmd	equ	26	; BYTE
n_vibratopos	equ	27	; BYTE
n_tremolocmd	equ	28	; BYTE
n_tremolopos	equ	29	; BYTE
n_wavecontrol	equ	30	; BYTE
n_glissfunk	equ	31	; BYTE
n_sampleoffset	equ	32	; BYTE
n_pattpos	equ	33	; BYTE
n_loopcount	equ	34	; BYTE
n_funkoffset	equ	35	; BYTE
n_wavestart	equ	36	; LONG
n_reallength	equ	40	; WORD


; --------------------------------------------------------------------------


; Paula hardware register offsets.


AUDxLCH	equ	0	; DWORD location (high/low)
AUDxLCL	equ	2	;
AUDxLEN	equ	4	; WORD  length
AUDxPER	equ	6	; WORD  period
AUDxVOL	equ	8	; WORD  volume


; --------------------------------------------------------------------------


; Initialize MOD.


mt_init:	lea	mt_data,a0
	move.l	a0,mt_songdataptr
	move.l	a0,a1
	lea	952(a1),a1
	moveq	#127,d0
	moveq	#0,d1

mtloop:	move.l	d1,d2
	subq.w	#1,d0

mtloop2:	move.b	(a1)+,d1
	cmp.b	d2,d1
	bgt.s	mtloop
	dbra	d0,mtloop2
	addq.b	#1,d2
			
	lea	mt_samplestarts(pc),a1
	asl.l	#8,d2
	asl.l	#2,d2
	add.l	#1084,d2
	add.l	a0,d2
	move.l	d2,a2
	moveq	#30,d0

mtloop3:	clr.l	(a2)
	move.l	a2,(a1)+
	moveq	#0,d1
	move.w	42(a0),d1
	asl.l	#1,d1
	add.l	d1,a2
	add.l	#30,a0
	dbra	d0,mtloop3

	or.b	#2,$bfe001
	move.b	#6,mt_speed
	clr.b	mt_counter
	clr.b	mt_songpos
	clr.w	mt_patternpos

mt_end:	clr.w	$dff0a8			; AUDxVOL
	clr.w	$dff0b8
	clr.w	$dff0c8
	clr.w	$dff0d8
	move.w	#$f,$dff096		; DMACON
	rts


; --------------------------------------------------------------------------
; --------------------------------------------------------------------------
; --------------------------------------------------------------------------


; Play MOD **VBLANK ROUTINE**


mt_music:	movem.l	d0-d4/a0-a6,-(sp)

	addq.b	#1,mt_counter
	move.b	mt_counter(pc),d0

	cmp.b	mt_speed(pc),d0
	blo.s	mt_nonewnote
	clr.b	mt_counter

	tst.b	mt_pattdeltime2
	beq.s	mt_getnewnote

	bsr.s	mt_nonewallchannels
	bra	mt_dskip


; --------------------------------------------------------------------------


mt_nonewnote:	bsr.s	mt_nonewallchannels
	bra	mt_nonewposyet


; --------------------------------------------------------------------------


mt_nonewallchannels:	lea	$dff0a0,a5		; AUD0
	lea	mt_chan1temp(pc),a6
	bsr	mt_checkefx

	lea	$dff0b0,a5		; AUD1
	lea	mt_chan2temp(pc),a6
	bsr	mt_checkefx

	lea	$dff0c0,a5		; AUD2
	lea	mt_chan3temp(pc),a6
	bsr	mt_checkefx

	lea	$dff0d0,a5		; AUD3
	lea	mt_chan4temp(pc),a6
	bra	mt_checkefx


; --------------------------------------------------------------------------


mt_getnewnote:	move.l	mt_songdataptr(pc),a0
	lea	12(a0),a3
	lea	952(a0),a2		; Pattpo
	lea	1084(a0),a0		; Patterndata
	moveq	#0,d0
	moveq	#0,d1
	move.b	mt_songpos(pc),d0
	move.b	(a2,d0.w),d1
	asl.l	#8,d1
	asl.l	#2,d1
	add.w	mt_patternpos(pc),d1
	clr.w	mt_dmacontemp

	lea	$dff0a0,a5		; AUD0
	lea	mt_chan1temp(pc),a6
	bsr.s	mt_playvoice

	lea	$dff0b0,a5		; AUD1
	lea	mt_chan2temp(pc),a6
	bsr.s	mt_playvoice

	lea	$dff0c0,a5		; AUD2
	lea	mt_chan3temp(pc),a6
	bsr.s	mt_playvoice

	lea	$dff0d0,a5		; AUD3
	lea	mt_chan4temp(pc),a6
	bsr.s	mt_playvoice
	bra	mt_setdma


; --------------------------------------------------------------------------


mt_playvoice:	tst.l	(a6)
	bne.s	mt_plvskip
	bsr	mt_pernop

;	------------

mt_plvskip:	move.l	(a0,d1.l),(a6)
	addq.l	#4,d1
	moveq	#0,d2
	move.b	n_cmd(a6),d2
	and.b	#$f0,d2
	lsr.b	#4,d2
	move.b	(a6),d0
	and.b	#$f0,d0
	or.b	d0,d2
	tst.b	d2
	beq	mt_setregs

	moveq	#0,d3
	lea	mt_samplestarts(pc),a1
	move	d2,d4
	subq.l	#1,d2
	asl.l	#2,d2
	mulu	#30,d4
	move.l	(a1,d2.l),n_start(a6)
	move.w	(a3,d4.l),n_length(a6)
	move.w	(a3,d4.l),n_reallength(a6)
	move.b	2(a3,d4.l),n_finetune(a6)
	move.b	3(a3,d4.l),n_volume(a6)
	move.w	4(a3,d4.l),d3		; Get repeat

	tst.w	d3
	beq.s	mt_noloop

	move.l	n_start(a6),d2		; Get start
	asl.w	#1,d3
	add.l	d3,d2			; Add repeat
	move.l	d2,n_loopstart(a6)
	move.l	d2,n_wavestart(a6)
	move.w	4(a3,d4.l),d0		; Get repeat
	add.w	6(a3,d4.l),d0		; Add replen
	move.w	d0,n_length(a6)
	move.w	6(a3,d4.l),n_replen(a6)	; Save replen
	moveq	#0,d0
	move.b	n_volume(a6),d0
	move.w	d0,8(a5)		; AUDxVOL
	bra.s	mt_setregs

mt_noloop:	move.l	n_start(a6),d2
	add.l	d3,d2
	move.l	d2,n_loopstart(a6)
	move.l	d2,n_wavestart(a6)
	move.w	6(a3,d4.l),n_replen(a6)	; Save replen
	moveq	#0,d0
	move.b	n_volume(a6),d0
	move.w	d0,8(a5)		; AUDxVOL

;	------------

mt_setregs:	move.w	(a6),d0
	and.w	#$0fff,d0
	beq	mt_checkmoreefx		; If no note

	move.w	2(a6),d0
	and.w	#$0ff0,d0
	cmp.w	#$0e50,d0
	beq.s	mt_dosetfinetune

	move.b	2(a6),d0
	and.b	#$0f,d0

	cmp.b	#3,d0			; Toneportamento
	beq.s	mt_chktoneporta

	cmp.b	#5,d0
	beq.s	mt_chktoneporta

	cmp.b	#9,d0			; Sample offset
	bne.s	mt_setperiod

	bsr	mt_checkmoreefx
	bra.s	mt_setperiod

;	------------

mt_dosetfinetune:	bsr	mt_setfinetune
	bra.s	mt_setperiod

;	------------

mt_chktoneporta:	bsr	mt_settoneporta
	bra	mt_checkmoreefx


; --------------------------------------------------------------------------


mt_setperiod:	movem.l	d0-d1/a0-a1,-(sp)
	move.w	(a6),d1
	and.w	#$0fff,d1
	lea	mt_periodtable(pc),a1
	moveq	#0,d0
	moveq	#36,d7

mt_ftuloop:	cmp.w	(a1,d0.w),d1
	bhs.s	mt_ftufound
	addq.l	#2,d0
	dbra	d7,mt_ftuloop

mt_ftufound:	moveq	#0,d1
	move.b	n_finetune(a6),d1
	mulu	#36*2,d1
	add.l	d1,a1
	move.w	(a1,d0.w),n_period(a6)
	movem.l	(sp)+,d0-d1/a0-a1

	move.w	2(a6),d0
	and.w	#$0ff0,d0
	cmp.w	#$0ed0,d0 ; notedelay
	beq	mt_checkmoreefx

	move.w	n_dmabit(a6),$dff096	; DMACON
	btst	#2,n_wavecontrol(a6)
	bne.s	mt_vibnoc
	clr.b	n_vibratopos(a6)

mt_vibnoc:	btst	#6,n_wavecontrol(a6)
	bne.s	mt_trenoc
	clr.b	n_tremolopos(a6)

mt_trenoc:	move.l	n_start(a6),(a5)	; AUDxLCH
	move.w	n_length(a6),4(a5)	; AUDxLEN
	move.w	n_period(a6),d0
	move.w	d0,6(a5)		; AUDxPER
	move.w	n_dmabit(a6),d0
	or.w	d0,mt_dmacontemp
	bra	mt_checkmoreefx
 

; --------------------------------------------------------------------------


mt_setdma:	move.w	#300,d0			; Software timing

mt_waitdma:	dbra	d0,mt_waitdma

	move.w	mt_dmacontemp(pc),d0
	or.w	#$8000,d0
	move.w	d0,$dff096		; DMACON

	move.w	#300,d0			; Software timing

mt_waitdma2:	dbra	d0,mt_waitdma2

	lea	$dff000,a5		; **HARDWARE**

	lea	mt_chan4temp(pc),a6
	move.l	n_loopstart(a6),$d0(a5)	; AUD3LCH
	move.w	n_replen(a6),$d4(a5)	; AUD3LEN

	lea	mt_chan3temp(pc),a6
	move.l	n_loopstart(a6),$c0(a5)	; AUD2LCH
	move.w	n_replen(a6),$c4(a5)	; AUD2LEN

	lea	mt_chan2temp(pc),a6
	move.l	n_loopstart(a6),$b0(a5)	; AUD1LCH
	move.w	n_replen(a6),$b4(a5)	; AUD1LEN

	lea	mt_chan1temp(pc),a6
	move.l	n_loopstart(a6),$a0(a5)	; AUD0LCH
	move.w	n_replen(a6),$a4(a5)	; AUD0LEN

;	------------

mt_dskip:	add.w	#16,mt_patternpos
	move.b	mt_pattdeltime,d0
	beq.s	mt_dskc

	move.b	d0,mt_pattdeltime2
	clr.b	mt_pattdeltime

mt_dskc:	tst.b	mt_pattdeltime2
	beq.s	mt_dska

	subq.b	#1,mt_pattdeltime2
	beq.s	mt_dska
	sub.w	#16,mt_patternpos

;	------------

mt_dska:	tst.b	mt_pbreakflag
	beq.s	mt_nnpysk

	sf	mt_pbreakflag
	moveq	#0,d0
	move.b	mt_pbreakpos(pc),d0
	clr.b	mt_pbreakpos
	lsl.w	#4,d0
	move.w	d0,mt_patternpos

mt_nnpysk:	cmp.w	#1024,mt_patternpos
	blo.s	mt_nonewposyet

;	------------

mt_nextposition:	moveq	#0,d0
	move.b	mt_pbreakpos(pc),d0
	lsl.w	#4,d0
	move.w	d0,mt_patternpos
	clr.b	mt_pbreakpos
	clr.b	mt_posjumpflag
	addq.b	#1,mt_songpos
	and.b	#$7f,mt_songpos
	move.b	mt_songpos(pc),d1
	move.l	mt_songdataptr(pc),a0

	cmp.b	950(a0),d1
	blo.s	mt_nonewposyet
	clr.b	mt_songpos

;	------------

mt_nonewposyet:	tst.b	mt_posjumpflag
	bne.s	mt_nextposition

;	------------

	movem.l	(sp)+,d0-d4/a0-a6	; Exit
	rts


; --------------------------------------------------------------------------
; --------------------------------------------------------------------------
; --------------------------------------------------------------------------


mt_checkefx:	bsr	mt_updatefunk

	move.w	n_cmd(a6),d0
	and.w	#$0fff,d0
	beq.s	mt_pernop

	move.b	n_cmd(a6),d0

	and.b	#$0f,d0
	beq.s	mt_arpeggio

	cmp.b	#1,d0
	beq	mt_portaup

	cmp.b	#2,d0
	beq	mt_portadown

	cmp.b	#3,d0
	beq	mt_toneportamento

	cmp.b	#4,d0
	beq	mt_vibrato

	cmp.b	#5,d0
	beq	mt_toneplusvolslide

	cmp.b	#6,d0
	beq	mt_vibratoplusvolslide

	cmp.b	#$e,d0
	beq	mt_e_commands


; --------------------------------------------------------------------------


setback:	move.w	n_period(a6),6(a5)	; AUDxPER

	cmp.b	#7,d0
	beq	mt_tremolo

	cmp.b	#$a,d0
	beq	mt_volumeslide

mt_return2:	rts


; --------------------------------------------------------------------------


mt_pernop:	move.w	n_period(a6),6(a5)	; AUDxPER
	rts


; --------------------------------------------------------------------------
; --------------------------------------------------------------------------
; --------------------------------------------------------------------------


; CMD $0xx


mt_arpeggio:	moveq	#0,d0
	move.b	mt_counter(pc),d0
	divs	#3,d0
	swap	d0
	cmp.w	#0,d0
	beq.s	mt_arpeggio2
	cmp.w	#2,d0
	beq.s	mt_arpeggio1
	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	lsr.b	#4,d0
	bra.s	mt_arpeggio3

mt_arpeggio1:	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	and.b	#15,d0
	bra.s	mt_arpeggio3

mt_arpeggio2:	move.w	n_period(a6),d2
	bra.s	mt_arpeggio4

mt_arpeggio3:	asl.w	#1,d0
	moveq	#0,d1
	move.b	n_finetune(a6),d1
	mulu	#36*2,d1
	lea	mt_periodtable(pc),a0
	add.l	d1,a0
	moveq	#0,d1
	move.w	n_period(a6),d1
	moveq	#36,d7

mt_arploop:	move.w	(a0,d0.w),d2
	cmp.w	(a0),d1
	bhs.s	mt_arpeggio4
	addq.l	#2,a0
	dbra	d7,mt_arploop
	rts

mt_arpeggio4:	move.w	d2,6(a5)		; AUDxPER
	rts


; --------------------------------------------------------------------------


; CMD $E1x


mt_fineportaup:	tst.b	mt_counter
	bne.s	mt_return2
	move.b	#$0f,mt_lowmask


; --------------------------------------------------------------------------


; CMD $1xx


mt_portaup:	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	and.b	mt_lowmask(pc),d0
	move.b	#$ff,mt_lowmask
	sub.w	d0,n_period(a6)
	move.w	n_period(a6),d0
	and.w	#$0fff,d0

	cmp.w	#113,d0
	bpl.s	mt_portauskip
	and.w	#$f000,n_period(a6)
	or.w	#113,n_period(a6)

mt_portauskip:	move.w	n_period(a6),d0
	and.w	#$0fff,d0
	move.w	d0,6(a5)		; AUDxPER
	rts	


; --------------------------------------------------------------------------


; CMD $E2x

 
mt_fineportadown:	tst.b	mt_counter
	bne	mt_return2
	move.b	#$0f,mt_lowmask


; --------------------------------------------------------------------------


; CMD $2xx


mt_portadown:	clr.w	d0
	move.b	n_cmdlo(a6),d0
	and.b	mt_lowmask(pc),d0
	move.b	#$ff,mt_lowmask
	add.w	d0,n_period(a6)
	move.w	n_period(a6),d0
	and.w	#$0fff,d0

	cmp.w	#856,d0
	bmi.s	mt_portadskip
	and.w	#$f000,n_period(a6)
	or.w	#856,n_period(a6)

mt_portadskip:	move.w	n_period(a6),d0
	and.w	#$0fff,d0
	move.w	d0,6(a5)		; AUDxPER
	rts


; --------------------------------------------------------------------------


mt_settoneporta:	move.l	a0,-(sp)

	move.w	(a6),d2
	and.w	#$0fff,d2
	moveq	#0,d0
	move.b	n_finetune(a6),d0
	mulu	#37*2,d0
	lea	mt_periodtable(pc),a0
	add.l	d0,a0
	moveq	#0,d0

mt_stploop:	cmp.w	(a0,d0.w),d2
	bhs.s	mt_stpfound
	addq.w	#2,d0
	cmp.w	#37*2,d0
	blo.s	mt_stploop
	moveq	#35*2,d0

mt_stpfound:	move.b	n_finetune(a6),d2
	and.b	#8,d2
	beq.s	mt_stpgoss
	tst.w	d0
	beq.s	mt_stpgoss
	subq.w	#2,d0

mt_stpgoss:	move.w	(a0,d0.w),d2
	move.l	(sp)+,a0
	move.w	d2,n_wantedperiod(a6)
	move.w	n_period(a6),d0
	clr.b	n_toneportdirec(a6)
	cmp.w	d0,d2
	beq.s	mt_cleartoneporta
	bge	mt_return2
	move.b	#1,n_toneportdirec(a6)
	rts

mt_cleartoneporta:	clr.w	n_wantedperiod(a6)
	rts


; --------------------------------------------------------------------------


; CMD $3xx


mt_toneportamento:	move.b	n_cmdlo(a6),d0
	beq.s	mt_toneportnochange
	move.b	d0,n_toneportspeed(a6)
	clr.b	n_cmdlo(a6)

mt_toneportnochange:	tst.w	n_wantedperiod(a6)
	beq	mt_return2
	moveq	#0,d0
	move.b	n_toneportspeed(a6),d0
	tst.b	n_toneportdirec(a6)
	bne.s	mt_toneportaup

mt_toneportadown:	add.w	d0,n_period(a6)
	move.w	n_wantedperiod(a6),d0
	cmp.w	n_period(a6),d0
	bgt.s	mt_toneportasetper
	move.w	n_wantedperiod(a6),n_period(a6)
	clr.w	n_wantedperiod(a6)
	bra.s	mt_toneportasetper

mt_toneportaup:	sub.w	d0,n_period(a6)
	move.w	n_wantedperiod(a6),d0
	cmp.w	n_period(a6),d0
	blt.s	mt_toneportasetper
	move.w	n_wantedperiod(a6),n_period(a6)
	clr.w	n_wantedperiod(a6)

mt_toneportasetper:	move.w	n_period(a6),d2
	move.b	n_glissfunk(a6),d0
	and.b	#$0f,d0
	beq.s	mt_glissskip
	moveq	#0,d0
	move.b	n_finetune(a6),d0
	mulu	#36*2,d0
	lea	mt_periodtable(pc),a0
	add.l	d0,a0
	moveq	#0,d0

mt_glissloop:	cmp.w	(a0,d0.w),d2
	bhs.s	mt_glissfound
	addq.w	#2,d0
	cmp.w	#36*2,d0
	blo.s	mt_glissloop
	moveq	#35*2,d0

mt_glissfound:	move.w	(a0,d0.w),d2

mt_glissskip:	move.w	d2,6(a5)		; AUDxPER
	rts


; --------------------------------------------------------------------------


; CMD $4xx


mt_vibrato:	move.b	n_cmdlo(a6),d0
	beq.s	mt_vibrato2
	move.b	n_vibratocmd(a6),d2
	and.b	#$0f,d0
	beq.s	mt_vibskip
	and.b	#$f0,d2
	or.b	d0,d2

mt_vibskip:	move.b	n_cmdlo(a6),d0
	and.b	#$f0,d0
	beq.s	mt_vibskip2
	and.b	#$0f,d2
	or.b	d0,d2

mt_vibskip2:	move.b	d2,n_vibratocmd(a6)

mt_vibrato2:	move.b	n_vibratopos(a6),d0
	lea	mt_vibratotable(pc),a4
	lsr.w	#2,d0
	and.w	#$001f,d0
	moveq	#0,d2
	move.b	n_wavecontrol(a6),d2
	and.b	#$03,d2
	beq.s	mt_vib_sine
	lsl.b	#3,d0
	cmp.b	#1,d2
	beq.s	mt_vib_rampdown
	move.b	#255,d2
	bra.s	mt_vib_set

mt_vib_rampdown:	tst.b	n_vibratopos(a6)
	bpl.s	mt_vib_rampdown2
	move.b	#255,d2
	sub.b	d0,d2
	bra.s	mt_vib_set

mt_vib_rampdown2:	move.b	d0,d2
	bra.s	mt_vib_set

mt_vib_sine:	move.b	0(a4,d0.w),d2

mt_vib_set:	move.b	n_vibratocmd(a6),d0
	and.w	#15,d0
	mulu	d0,d2
	lsr.w	#7,d2
	move.w	n_period(a6),d0
	tst.b	n_vibratopos(a6)
	bmi.s	mt_vibratoneg
	add.w	d2,d0
	bra.s	mt_vibrato3

mt_vibratoneg:	sub.w	d2,d0

mt_vibrato3:	move.w	d0,6(a5)		; AUDxPER
	move.b	n_vibratocmd(a6),d0
	lsr.w	#2,d0
	and.w	#$003c,d0
	add.b	d0,n_vibratopos(a6)
	rts


; --------------------------------------------------------------------------


; CMD $5xx


mt_toneplusvolslide:	bsr	mt_toneportnochange
	bra	mt_volumeslide


; --------------------------------------------------------------------------


; CMD $6xx


mt_vibratoplusvolslide:	bsr.s	mt_vibrato2
	bra	mt_volumeslide


; --------------------------------------------------------------------------


; CMD $7xx


mt_tremolo:	move.b	n_cmdlo(a6),d0
	beq.s	mt_tremolo2
	move.b	n_tremolocmd(a6),d2
	and.b	#$0f,d0
	beq.s	mt_treskip
	and.b	#$f0,d2
	or.b	d0,d2

mt_treskip:	move.b	n_cmdlo(a6),d0
	and.b	#$f0,d0
	beq.s	mt_treskip2
	and.b	#$0f,d2
	or.b	d0,d2

mt_treskip2:	move.b	d2,n_tremolocmd(a6)

;	------------

mt_tremolo2:	move.b	n_tremolopos(a6),d0
	lea	mt_vibratotable(pc),a4
	lsr.w	#2,d0
	and.w	#$001f,d0
	moveq	#0,d2
	move.b	n_wavecontrol(a6),d2
	lsr.b	#4,d2
	and.b	#$03,d2
	beq.s	mt_tre_sine
	lsl.b	#3,d0
	cmp.b	#1,d2
	beq.s	mt_tre_rampdown
	move.b	#255,d2
	bra.s	mt_tre_set

mt_tre_rampdown:	tst.b	n_vibratopos(a6)
	bpl.s	mt_tre_rampdown2
	move.b	#255,d2
	sub.b	d0,d2
	bra.s	mt_tre_set

mt_tre_rampdown2:	move.b	d0,d2
	bra.s	mt_tre_set

mt_tre_sine:	move.b	0(a4,d0.w),d2

mt_tre_set:	move.b	n_tremolocmd(a6),d0
	and.w	#15,d0
	mulu	d0,d2
	lsr.w	#6,d2
	moveq	#0,d0
	move.b	n_volume(a6),d0
	tst.b	n_tremolopos(a6)
	bmi.s	mt_tremoloneg
	add.w	d2,d0
	bra.s	mt_tremolo3

mt_tremoloneg:	sub.w	d2,d0

mt_tremolo3:	bpl.s	mt_tremoloskip
	clr.w	d0

mt_tremoloskip:	cmp.w	#$40,d0
	bls.s	mt_tremolook
	move.w	#$40,d0

mt_tremolook:	move.w	d0,8(a5)		; AUDxVOL
	move.b	n_tremolocmd(a6),d0
	lsr.w	#2,d0
	and.w	#$003c,d0
	add.b	d0,n_tremolopos(a6)
	rts


; --------------------------------------------------------------------------


; CMD $9xx


mt_sampleoffset:	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	beq.s	mt_sononew
	move.b	d0,n_sampleoffset(a6)

mt_sononew:	move.b	n_sampleoffset(a6),d0
	lsl.w	#7,d0
	cmp.w	n_length(a6),d0
	bge.s	mt_sofskip
	sub.w	d0,n_length(a6)
	lsl.w	#1,d0
	add.l	d0,n_start(a6)
	rts

mt_sofskip:	move.w	#$0001,n_length(a6)
	rts


; --------------------------------------------------------------------------


; CMD $Axx


mt_volumeslide:	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	lsr.b	#4,d0
	tst.b	d0
	beq.s	mt_volslidedown

;	------------

mt_volslideup:	add.b	d0,n_volume(a6)
	cmp.b	#$40,n_volume(a6)
	bmi.s	mt_vsuskip
	move.b	#$40,n_volume(a6)

mt_vsuskip:	move.b	n_volume(a6),d0
	move.w	d0,8(a5)		; AUDxVOL
	rts

;	------------

mt_volslidedown:	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0

;	------------

mt_volslidedown2:	sub.b	d0,n_volume(a6)
	bpl.s	mt_vsdskip
	clr.b	n_volume(a6)

mt_vsdskip:	move.b	n_volume(a6),d0
	move.w	d0,8(a5)		; AUDxVOL
	rts


; --------------------------------------------------------------------------


; CMD $Bxx


mt_positionjump:	move.b	n_cmdlo(a6),d0
	subq.b	#1,d0
	move.b	d0,mt_songpos

mt_pj2:	clr.b	mt_pbreakpos
	st 	mt_posjumpflag
	rts


; --------------------------------------------------------------------------


; CMD $Cxx


mt_volumechange:	moveq	#0,d0
	move.b	n_cmdlo(a6),d0

	cmp.b	#$40,d0
	bls.s	mt_volumeok
	moveq	#$40,d0

mt_volumeok:	move.b	d0,n_volume(a6)
	move.w	d0,8(a5)		; AUDxVOL
	rts


; --------------------------------------------------------------------------


; CMD $Dxx


mt_patternbreak:	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	move.l	d0,d2
	lsr.b	#4,d0
	mulu	#10,d0
	and.b	#$0f,d2
	add.b	d2,d0

	cmp.b	#63,d0
	bhi.s	mt_pj2

	move.b	d0,mt_pbreakpos
	st	mt_posjumpflag
	rts


; --------------------------------------------------------------------------


; CMD $Fxx


mt_setspeed:	move.b	3(a6),d0
	beq	mt_return2

	clr.b	mt_counter
	move.b	d0,mt_speed
	rts


; --------------------------------------------------------------------------
; --------------------------------------------------------------------------
; --------------------------------------------------------------------------


mt_checkmoreefx:	bsr	mt_updatefunk

	move.b	2(a6),d0
	and.b	#$0f,d0

	cmp.b	#$9,d0
	beq	mt_sampleoffset

	cmp.b	#$b,d0
	beq	mt_positionjump

	cmp.b	#$d,d0
	beq.s	mt_patternbreak

	cmp.b	#$e,d0
	beq.s	mt_e_commands

	cmp.b	#$f,d0
	beq.s	mt_setspeed

	cmp.b	#$c,d0
	beq	mt_volumechange

	bra	mt_pernop


; --------------------------------------------------------------------------
; --------------------------------------------------------------------------
; --------------------------------------------------------------------------


; CMD $Exx


mt_e_commands:	move.b	n_cmdlo(a6),d0
	and.b	#$f0,d0

	lsr.b	#4,d0
	beq.s	mt_filteronoff

	cmp.b	#1,d0
	beq	mt_fineportaup

	cmp.b	#2,d0
	beq	mt_fineportadown

	cmp.b	#3,d0
	beq.s	mt_setglisscontrol

	cmp.b	#4,d0
	beq	mt_setvibratocontrol

	cmp.b	#5,d0
	beq	mt_setfinetune

	cmp.b	#6,d0
	beq	mt_jumploop

	cmp.b	#7,d0
	beq	mt_settremolocontrol

	cmp.b	#9,d0
	beq	mt_retrignote

	cmp.b	#$a,d0
	beq	mt_volumefineup

	cmp.b	#$b,d0
	beq	mt_volumefinedown

	cmp.b	#$c,d0
	beq	mt_notecut

	cmp.b	#$d,d0
	beq	mt_notedelay

	cmp.b	#$e,d0
	beq	mt_patterndelay

	cmp.b	#$f,d0
	beq	mt_funkit
	rts


; --------------------------------------------------------------------------


; CMD $E0x


mt_filteronoff:	move.b	n_cmdlo(a6),d0
	and.b	#1,d0
	asl.b	#1,d0
	and.b	#$fd,$bfe001
	or.b	d0,$bfe001
	rts	


; --------------------------------------------------------------------------


; CMD $E3x


mt_setglisscontrol:	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0
	and.b	#$f0,n_glissfunk(a6)
	or.b	d0,n_glissfunk(a6)
	rts


; --------------------------------------------------------------------------


; CMD $E4x


mt_setvibratocontrol:	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0
	and.b	#$f0,n_wavecontrol(a6)
	or.b	d0,n_wavecontrol(a6)
	rts


; --------------------------------------------------------------------------


; CMD $E5x


mt_setfinetune:	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0
	move.b	d0,n_finetune(a6)
	rts


; --------------------------------------------------------------------------


; CMD $E6x


mt_jumploop:	tst.b	mt_counter
	bne	mt_return2
	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0
	beq.s	mt_setloop
	tst.b	n_loopcount(a6)
	beq.s	mt_jumpcnt
	subq.b	#1,n_loopcount(a6)
	beq	mt_return2

mt_jmploop:	move.b	n_pattpos(a6),mt_pbreakpos
	st	mt_pbreakflag
	rts

mt_jumpcnt:	move.b	d0,n_loopcount(a6)
	bra.s	mt_jmploop

mt_setloop:	move.w	mt_patternpos(pc),d0
	lsr.w	#4,d0
	move.b	d0,n_pattpos(a6)
	rts


; --------------------------------------------------------------------------


; CMD $E7x


mt_settremolocontrol:	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0
	lsl.b	#4,d0
	and.b	#$0f,n_wavecontrol(a6)
	or.b	d0,n_wavecontrol(a6)
	rts


; --------------------------------------------------------------------------


; CMD $E9x


mt_retrignote:	move.l	d1,-(sp)
	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0
	beq.s	mt_rtnend

	moveq	#0,d1
	move.b	mt_counter(pc),d1
	bne.s	mt_rtnskp

	move.w	(a6),d1
	and.w	#$0fff,d1		; Note ?
	bne.s	mt_rtnend

	moveq	#0,d1
	move.b	mt_counter(pc),d1

mt_rtnskp:	divu	d0,d1
	swap	d1
	tst.w	d1
	bne.s	mt_rtnend

mt_doretrig:	move.w	n_dmabit(a6),$dff096	; DMACON channel off
	move.l	n_start(a6),(a5)	; AUDxLCH
	move.w	n_length(a6),4(a5)	; AUDxLEN

	move.w	#300,d0			; Software timing

mt_rtnloop1:	dbra	d0,mt_rtnloop1

	move.w	n_dmabit(a6),d0
	bset	#15,d0
	move.w	d0,$dff096		; DMACON

	move.w	#300,d0			; Software timing

mt_rtnloop2:	dbra	d0,mt_rtnloop2

	move.l	n_loopstart(a6),(a5)	; AUDxLCH
	move.l	n_replen(a6),4(a5)	; AUDxLEN

mt_rtnend:	move.l	(sp)+,d1
	rts


; --------------------------------------------------------------------------


; CMD $EAx


mt_volumefineup:	tst.b	mt_counter
	bne	mt_return2
	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	and.b	#$f,d0
	bra	mt_volslideup


; --------------------------------------------------------------------------


; CMD $EBx


mt_volumefinedown:	tst.b	mt_counter
	bne	mt_return2
	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0
	bra	mt_volslidedown2


; --------------------------------------------------------------------------


; CMD $ECx


mt_notecut:	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0
	cmp.b	mt_counter(pc),d0
	bne	mt_return2
	clr.b	n_volume(a6)
	move.w	#0,8(a5)		; AUDxVOL
	rts


; --------------------------------------------------------------------------


; CMD $EDx


mt_notedelay:	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0

	cmp.b	mt_counter,d0
	bne	mt_return2

	move.w	(a6),d0
	beq	mt_return2

	move.l	d1,-(sp)		; **STACK**
	bra	mt_doretrig


; --------------------------------------------------------------------------


; CMD $EEx


mt_patterndelay:	tst.b	mt_counter
	bne	mt_return2

	moveq	#0,d0
	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0

	tst.b	mt_pattdeltime2
	bne	mt_return2
	addq.b	#1,d0
	move.b	d0,mt_pattdeltime
	rts


; --------------------------------------------------------------------------


; CMD $EFx


mt_funkit:	tst.b	mt_counter
	bne	mt_return2

	move.b	n_cmdlo(a6),d0
	and.b	#$0f,d0
	lsl.b	#4,d0
	and.b	#$0f,n_glissfunk(a6)
	or.b	d0,n_glissfunk(a6)
	tst.b	d0
	beq	mt_return2


; --------------------------------------------------------------------------


mt_updatefunk:	movem.l	a0/d1,-(sp)

	moveq	#0,d0
	move.b	n_glissfunk(a6),d0
	lsr.b	#4,d0
	beq.s	mt_funkend

	lea	mt_funktable(pc),a0
	move.b	(a0,d0.w),d0
	add.b	d0,n_funkoffset(a6)
	btst	#7,n_funkoffset(a6)
	beq.s	mt_funkend
	clr.b	n_funkoffset(a6)

	move.l	n_loopstart(a6),d0
	moveq	#0,d1
	move.w	n_replen(a6),d1
	add.l	d1,d0
	add.l	d1,d0
	move.l	n_wavestart(a6),a0
	addq.l	#1,a0

	cmp.l	d0,a0
	blo.s	mt_funkok
	move.l	n_loopstart(a6),a0

mt_funkok:	move.l	a0,n_wavestart(a6)
	moveq	#-1,d0
	sub.b	(a0),d0
	move.b	d0,(a0)

mt_funkend:	movem.l	(sp)+,a0/d1
	rts


; --------------------------------------------------------------------------


mt_FunkTable	dc.b	0,5,6,7,8,10,11,13,16,19,22,26,32,43,64,128


; --------------------------------------------------------------------------


mt_VibratoTable	dc.b	  0, 24, 49, 74, 97,120,141,161
	dc.b	180,197,212,224,235,244,250,253
	dc.b	255,253,250,244,235,224,212,197
	dc.b	180,161,141,120, 97, 74, 49, 24


; --------------------------------------------------------------------------


mt_PeriodTable

 dc.w 856,808,762,720,678,640,604,570,538,508,480,453 ; Tuning 0, Normal
 dc.w 428,404,381,360,339,320,302,285,269,254,240,226
 dc.w 214,202,190,180,170,160,151,143,135,127,120,113

 dc.w 850,802,757,715,674,637,601,567,535,505,477,450 ; Tuning 1
 dc.w 425,401,379,357,337,318,300,284,268,253,239,225
 dc.w 213,201,189,179,169,159,150,142,134,126,119,113

 dc.w 844,796,752,709,670,632,597,563,532,502,474,447 ; Tuning 2
 dc.w 422,398,376,355,335,316,298,282,266,251,237,224
 dc.w 211,199,188,177,167,158,149,141,133,125,118,112

 dc.w 838,791,746,704,665,628,592,559,528,498,470,444 ; Tuning 3
 dc.w 419,395,373,352,332,314,296,280,264,249,235,222
 dc.w 209,198,187,176,166,157,148,140,132,125,118,111

 dc.w 832,785,741,699,660,623,588,555,524,495,467,441 ; Tuning 4
 dc.w 416,392,370,350,330,312,294,278,262,247,233,220
 dc.w 208,196,185,175,165,156,147,139,131,124,117,110

 dc.w 826,779,736,694,655,619,584,551,520,491,463,437 ; Tuning 5
 dc.w 413,390,368,347,328,309,292,276,260,245,232,219
 dc.w 206,195,184,174,164,155,146,138,130,123,116,109

 dc.w 820,774,730,689,651,614,580,547,516,487,460,434 ; Tuning 6
 dc.w 410,387,365,345,325,307,290,274,258,244,230,217
 dc.w 205,193,183,172,163,154,145,137,129,122,115,109

 dc.w 814,768,725,684,646,610,575,543,513,484,457,431 ; Tuning 7
 dc.w 407,384,363,342,323,305,288,272,256,242,228,216
 dc.w 204,192,181,171,161,152,144,136,128,121,114,108

 dc.w 907,856,808,762,720,678,640,604,570,538,508,480 ; Tuning -8
 dc.w 453,428,404,381,360,339,320,302,285,269,254,240
 dc.w 226,214,202,190,180,170,160,151,143,135,127,120

 dc.w 900,850,802,757,715,675,636,601,567,535,505,477 ; Tuning -7
 dc.w 450,425,401,379,357,337,318,300,284,268,253,238
 dc.w 225,212,200,189,179,169,159,150,142,134,126,119

 dc.w 894,844,796,752,709,670,632,597,563,532,502,474 ; Tuning -6
 dc.w 447,422,398,376,355,335,316,298,282,266,251,237
 dc.w 223,211,199,188,177,167,158,149,141,133,125,118

 dc.w 887,838,791,746,704,665,628,592,559,528,498,470 ; Tuning -5
 dc.w 444,419,395,373,352,332,314,296,280,264,249,235
 dc.w 222,209,198,187,176,166,157,148,140,132,125,118

 dc.w 881,832,785,741,699,660,623,588,555,524,494,467 ; Tuning -4
 dc.w 441,416,392,370,350,330,312,294,278,262,247,233
 dc.w 220,208,196,185,175,165,156,147,139,131,123,117

 dc.w 875,826,779,736,694,655,619,584,551,520,491,463 ; Tuning -3
 dc.w 437,413,390,368,347,328,309,292,276,260,245,232
 dc.w 219,206,195,184,174,164,155,146,138,130,123,116

 dc.w 868,820,774,730,689,651,614,580,547,516,487,460 ; Tuning -2
 dc.w 434,410,387,365,345,325,307,290,274,258,244,230
 dc.w 217,205,193,183,172,163,154,145,137,129,122,115

 dc.w 862,814,768,725,684,646,610,575,543,513,484,457 ; Tuning -1
 dc.w 431,407,384,363,342,323,305,288,272,256,242,228
 dc.w 216,203,192,181,171,161,152,144,136,128,121,114


; --------------------------------------------------------------------------


mt_chan1temp	dc.l	0,0,0,0,0,$00010000,0,0,0,0,0
mt_chan2temp	dc.l	0,0,0,0,0,$00020000,0,0,0,0,0
mt_chan3temp	dc.l	0,0,0,0,0,$00040000,0,0,0,0,0
mt_chan4temp	dc.l	0,0,0,0,0,$00080000,0,0,0,0,0

mt_samplestarts	dc.l	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dc.l	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


; --------------------------------------------------------------------------


mt_songdataptr	dc.l	0

mt_speed	dc.b	6
mt_counter	dc.b	0
mt_songpos	dc.b	0
mt_pbreakpos	dc.b	0
mt_posjumpflag	dc.b	0
mt_pbreakflag	dc.b	0
mt_lowmask	dc.b	0
mt_pattdeltime	dc.b	0
mt_pattdeltime2	dc.b	0

mt_patternpos	dc.w	0
mt_dmacontemp	dc.w	0


; --------------------------------------------------------------------------

